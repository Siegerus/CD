footer
	padding: 14px 23px 39px 23px
	position: relative
	.footer_line
		margin: 0 auto
		width: 299px
		height: 4px
		background-color: $first_color
	.links_wrapper

	.social_block
		position: absolute
		top: 51px
		display: flex
		justify-content: center
		width: 160px
	.social_links
		justify-content: center
		align-items: center
		margin: 0  4px
		display: flex
		width: 32px
		height: 32px
		background-color: #070716
		border-radius: 100px
		i
			color: #fff
			
			
	.footer_main_links
		display: flex
		justify-content: center
		margin: 34px auto 0 auto
		
	.main_links_item
		padding: 0 23px
		display: block
		text-decoration: none
		font-size: 15px
		font-weight: 300
		text-transform: uppercase
		color: #070716
		text-decoration: none
		text-align: center
	.footer_sublinks
		margin-top: 15px
		display: flex
		justify-content: center
	.sublinks_item	
		padding: 0 11px
		display: block
		text-decoration: none
		font-size: 11px
		font-weight: 300
		text-transform: uppercase
		color: #999999
	.store_block
		position: absolute
		top: 52px
		right: 23px
		img
			display: block
			width: 296px
			height: 27px
		
	.russian
		margin-top: 19px
		font-size: 11px
		font-weight: 400
		text-transform: uppercase
		color: #1fbad6
		text-align: center


1. Главный файл - это всегда index.html
2. Не называть на кирилице, не называть транслитом
3. Для запуска локального сервера, что бы не обновлять постояяно страницу в браузере, запускается локальный север (Нажать go live  внизу в VSCode)

                      h1                                                    	
                  h2    h2			- Должна соблюдаться логическая структура заголовков. Если есть h1 , то обязательно потом должен идти h2 и только потом - h3
           h3   h3    h3    h3                                             Это сказывается на поисковой выдаче в поисковиках

4. Симантические теги (header, footer, main, nav, section и т.д) улучшают оптимизацию сайта и сайт будет выше в приоритете у поисковиков 

5. Блочные элементы "прожорливы" и каждый занимает всю ширину страницы. Строчные распологаются подряд в строке. Строчно-блочные имеют все св-ва блоков
и при этом могут распологаться один за другим в строке. Какой элемент к какому типу принадлежит, можно посмотреть в справочнике.
6.position absolute работает только относительно родительского блока у которого будет position relative. Что бы абсолютно спозиционировать какойто элемент внутри
родительского блока, у этого родительского блока должен быть  position relative. Иначе элемент будет абсолютно позиционироваться относительно всей страницы.
7.Единица измерения "%" в css является  относительной и зависит от размера родительского элемента. Например Если у родителя ширина 100px, то если поставить єлименту
 ширину 50%,  ширина будет равна 50px. Так же относительная величина "em" - она зависит от того какого размера шрифт у элемента (почти не использкуется).

Еденица "rem" - зависит от того , какой размер шрифта у всего документа. Например если шрифт =20рх , а величину rem установить =30, то размер элемента будет = 600рх 
(это тоже редко используется)

Единицы  vh, vw - единицы зависящие от высоты и ширины экрана. Одна еденица vh/vw  экрана = одной сотой высоты/ширины экрана.
8, Когда стилизуем что то с помощью тегов (<div> и т.д), то эти стили получаются наименее специфичными ,таких тегов на странице может быть много. Классы уже более специфичны, т.к они устанавливаются определённым элементам. Если у элемента несколько классов , то специфичней (приоритетней) будет класс стиллизованный последним, он будет перебивать предыдущие. Самым спицифичным будет ID, он будет перебивать все. За исключением, если стилизовать в строке  в самом html документе в фориате  "style="   " "/
  Когда есть пробел  ".wrapper   .element" - То это понимается как - "В класс wrapper вложенный класс element" (Такое уточнение,вложенность будет специфичнее, чем просто класс)
  Когда без пробела - "#second.element" - Читается как "Элемент #second. , для которого установлен класс element". (Такое уточнение будет специфичней (приоритетней) чем просто  ID #second ) 
9.Когда копируем стили из дизайнерских редакторов, нужно обращать внимание на межстрочный интервал (line-height:). Из за него тексты из блоков могут  наезжать друг на друга. Если У текста только одна строка, то лучше вообще его не копировать.
10. Стараться велать под одну гребёнку - отступы у всех объектов либо сверху, либо снизу.

11 .waiting_wrapper>.waiting_item*3>img.waiting_img+.waiting_descr    - Emmet может раскрыть ьакую строчку следующим образом:
    
    <div class="waiting_wrapper">                                             
            <div class="waiting_item">                                         
                <img src="" alt="" class="waiting_img">                           
                <div class="waiting_descr"></div>                                
            </div>
            <div class="waiting_item">
                <img src="" alt="" class="waiting_img">
                <div class="waiting_descr"></div>
            </div>
            <div class="waiting_item">
                <img src="" alt="" class="waiting_img">
                <div class="waiting_descr"></div>
            </div>
        </div> 

12. Файл normalized.css нужен для сброса и нормализации стилей в разных браузерах. Подключается как и style.css  , но обязательно ДО него.  Вообще все дополнительные стили (и шрифты) лучше подключать до основного файла стилей.
Для своих проэктов нужно подключать нормализатор с расширением min, он позволяет сайту работать быстрее.

13.font-family: Verdana, Arial, Helvetica, sans-serif;   Шрифты слева направо - приоритет в порядке убывания. Если никаких шрифтов в системе не будет, то отобразиться 
 sans-serif - просто какой то дефолтный шрифт без засечек. ( serif - с засечками).

14. Шрифты можно подключать с сайта https://fonts.google.com/. Больше некольких шрифтов обычно не подключают, т.к. тормозит загрузку сайта.
Также шрифты обычно подключают через стандартный тег link, а не @import.
Ещё шрифты можно подключить локально скачав, например, с https://webfonts.pro и добавив в свой проект. Там скопировать код (нажать на красную "web") в свой style.css  и подправить его, указав корректные пути.

"html {                                                             
    font-family: 'Roboto', sans-serif;              /* Так включаем шрифт который скачали локально или подключили с гугла. */
}"

15. Чаще всего используются форматы шрифтов woff и   woff2.

16. Bootstrap библиотеку можно подключить через ссылку, а можно скачать и подключить локально (Основной подключаемый файл будет bootstrap.min.css)
Если используем бутстреп, то отдельно нормалайз подключать не нужно, он по факту уже встроен (bootstrapreboot.css).
 Правила БТ. 
1. Что бы использовать колоночную верстку, обязательно нужен "container" или "container-fluid".
2. Колонки "col" всегда создаются в строках "row".
3. Колонки можно модифицировать.
<!-- Задаётся ширина колонок. Ширина измеряется в "макеточных" колонках.Всего их 12 -->
<!--Таким образом задаём сколько "макеточных"колонок будет вмещать каждая колонка. -->
17. Если из БТ нужна только сетка для колоночной верстки, то подключаем только "grid.css". Можно также отдельно bootstrap-reboot.css.

18.  В ссылки можно делать заглушки, прописывая в href "#". Тогда при нажатии на ссыску она будет вести на ту же страницу.

19. Отступы сверху и снизу в секциях лучше делать padding ами. *?
20. Если элемент занимает пространство больше, чем контент в нём и из за этого отодвигается по вертикали, то высоту расположения можно менять с помощью "line-height".

21. Чтобы преобразовывать препроцессоры в css код, есть несколько способов.
 1 - Программы. Scout-app , Kюoala.

22." &_color" - "&" - амперсанд. Пишется вместо названия класса, когда оно одинаковое, а уже после неё дописывается отличие.
23. "$text_color: red" - так задаются переменные. Задаются вначале css или sass документа, ну или отдельным файлом.
24". @mixin box
    display: block
    width: 125px
    height: 125px
    background-color: yellow " - Так задаются миксины - куски кода, набор свойств.
 
   "button
        @include box"  - А так миксины включаются инклюдом для нужных селекторов.
25. Есть альтернативный синтаксис. Вместо миксина можно использовать "=box", а вместо инклюда "+box".
26. Псевдоклассы. Нужны что бы управлять состоянием элемента (элемент меняется при наведении, после посещения и т.д).
27. Псевдоклассы и псевдоэлементы ы синтаксисе между собой ничем не отличаются.
28."&:before
        content: ''
        display: block
        height: 5px
        background-color: black"- Так можно добавлять перед нужным элеиентом,например, какой-то блок и т.д.

"&:before
        content: ''
        width: 0%
        display: block
        height: 2px
        background-color: black
    &:hover
        &:before
            content: ''
            width: 100%
            display: block
            height: 2px
            background-color: black
            transition: 0.5s all" - Задали что перед элементом будет блок, но его не будет видно - "width: 0%", 
                                                      А при наведении ("hover"), он будет появляться - width: 100%. 
             " transition"  - св-во, отвечающее за скорость анимации.

29. left: 50%
       transform: translateX(-50%)

30. Можно использовать иконочные шрифты. Для этого зайти на https://fontawesome.com/ и скопировыть оттуда ссылку в head проекта (подключить перед "style.css   )
     Дальше в поиске на сайте найти нужную иконку и скопировать её тег и класс себе в проект, в то место, где она будет находиться..

background: linear-gradient(-45deg,#070716 50%, #ffc61a 50%)
31. По умолчанию в папке Sass будут компилироваться все файлы. Когда в папке создаём другие файлы, которые будем потом включать в основной файл, начинаем их
название с нижнего подчёркивания.
32. @media (max-width: 1200px) - та приминяется медиа. При разрешении в 1200рх будут применяться следующие значения.
      @media - в основном style нужна подключать уже после всех блоков и т.д
.menu
        &_item
            padding-right: 20px  
        &_link
            font-size: 13px 
                                             Классы колонок в БТ указываются от меньшего к большему. НУжно подбирать кол-во для каждой контр. точки. Например, если больших колонок 
нужно было 2 , и отступных колонок тоже 2, то в точке по-меньше может быть нужно уже 3 колонки и отступ 1. В меньшем классе и колонки меньше.

33. 	xs
<576px	sm
≥576px	md               -Для каждой контрольной точки проверяем адаптацию. И подбираем нужные размеры, отступы в меню разработчика.
≥768px	lg                  После того, как подобрали нужные значения для данной точки, уменьшаем до размеров следующей точки, если всё верно подобрали,
≥992px	xl                   на протяжении всего уменьшения   всё должно отображаться корректно.
≥1200px	xxl
≥1400px

@media (max-width: 991px)  - задают именно 991рх а не 992, потому что на 991 идёт переключение на другие колонки.
34. Что бы скрыть какой то элемент можно просто написать "display: none".
35. Для разрешений уже больше 768рх лучше адаптировать контент в 2 колонки, в одну смотрится не очень.
36. Что бы сделать ссылку удобнее для моб.устройств, можно сделать её блочной и расширить как нужно. Так же добавить пэддинги, что бы не промахиваться.
37.При мобильной адаптации эффекты ховер обычно убираются.

38. <li class="menu_item"><a class="menu_link" href="#require">Со своим автомобилем</a></li>   <!-- Локальная ссылка. -->
       <section class="require" id="require">  					              <!-- id для локальной ссылки. -->
39. shift+f5 - перезагрузка страницы со сбросом кэша.
40. git  команды. "git init" - инициализация, при первом запуске. Создаётся репозиторий в той папке, в которой инициировали через консоль.
	              "git config" - настройки.
 	              "git config --global user.name "Siegerus""        Установка пользователя и мейла глобально.
	               "git config --global user.email ivanoffsiegerus@gmail.com"
	              "git status"	- статус файлов на данный момент.
 	               "git add -A" - Добавить все файлы, которые есть в папке.
	               "git add "название файла"." - добавляет конкретный файл. Если перед точкой расширения поставить звёздочку, то добавятся все файлы этого типа.
	             "git commit -a -m"first commit"  " - создание контр.точки. "- а" - всех файлов. "-m" - коментарии к точке, После "m"  нет пробела.
	              "git log" - лог контр. точек.
	              "git remote add origin https://github.com/Siegerus/test_project.git" Связываем локальный репозиторий с удалённым. Строку копируем с гитхаба.
 	               "git push -u origin master" - загружаем файлы с локального на удалённый репозиторий.
	                "git clone" - клонируем проект из репозитория на другой комп. При клонировании гит сам связывает с удалённым репозиторием автоматически.
 	               "git pull" - загрузка обратно из репозитория проекта уже с изменениями, которій клонировали на другой комп.

41. npm init - инициализация менеджера пакетов.
      "npm install --global gulp-cli"  - установка утилиты, которая позволяет работать с галпом  через терминал  При первом запуске делаем сначала глобально.   
      "npm install  gulp-cli --save-dev" - Пслеэтго уснавливем уже локльно в проект.
      "npm install --save-dev gulp"- дальше ставим сам гулп.
       После этого можем устанавливать пакеты с https://www.npmjs.com/. Копируем там строку и вбиваем в консоль. В конце каждой строки добавляем "--save-dev".

   "npm install -g browser-sync" этот пакет ставим сначала глобально. Если возникает ошибка, что нужно установить о имении адм, то пишем "sudo npm install -g browser-sync".
  "npm install  browser-sync --save-dev " - потом локально.
   Список нужных пакетов:    
    "browser-sync": "^3.0.2",
    "gulp": "^4.0.2",
    "gulp-autoprefixer": "^9.0.0",
    "gulp-clean-css": "^4.3.0",
    "gulp-cli": "^2.3.0",
    "gulp-rename": "^2.0.0",
    "gulp-sass": "^5.1.0",
    "sass": "^1.71.1"
    После установки пакетов создаём файл с названием "gulpfile.js". Создаём в проекте, рядом с package.json .

42.БЭМ - блок элемент модификатор. Основное правило при создании блока то, что он сможет быть повторно использован. Блокам не стоит задаватьпозиционирование
 , внешнюю геометрию
(мрджины и т.д.). Блоки могут вкладываться друг в друга. У блоков не всегда должны быть элементы, их может не быть.
Элемент. Элемент не может быть использован в отрыве от блока.  "search-form__imput" -  Блок "serch-form" и элемент блока "imput". Элемент указывается через "__".
Модификатор.Пример. "search-form search-form_disabled " - блок и модификатор блока. "search-form__button search-form__button_disabled"- элемент и модификатор.
Модификатор пишется через одно подчеркивание. Модификатор не может использоваться отдельно от элемента  или от блока , т.е мы должны прописывать 2 класса.
 Один клас - это блок или элемент, а второй - модификатор.
Блоки и элементы могут быть вложены друг в бруга, главное использовать это только в верстке,  не в названииях классов.

43. <form action="#">                   		" action="#" - тут указывается файл, в котором будет происходить обработка формы.
            <label for="first">First input</label>
            <input id="first" type="text">
        </form>                                                           -  Пример формы с инпутом. Лайбл (подпись)для инпута назначается через id.


<label for="first">First input                         -    Также инпут кладут внутрь лейбла, что бы его можно было удобно стилизовать.
                <input id="first" type="text">
</label>

<input required placeholder="Ваш E-mail" type="email">     -  "required" -  задаёт обязательный к заполнению импут .

<input type="submit" value="заказать кОНСУЛЬТАЦИЮ">  -   два различных варианта сделать кнопку сабмит (отправка данных из формы на сервер).
<button>заказать кОНСУЛЬТАЦИЮ</button>                              - второй предпочтительней.

<input type="reset">                                                                              - кнопка для сброса.

<textarea name="" ></textarea>                  -  Поле для текста. В стилях потом такому полю обычно задают "resize: none", что бы поле нельзя было растягивать и ломать верстку.

<input name="name" required placeholder="Ваше имя" type="text">    -  Обязательно нужно указывать атрибут "name"  для последующей обработки данных на сервере и т.д.
<input name="phone" required placeholder="Ваш телефон" type="tel"> A
<input name="email" required placeholder="Ваш E-mail" type="email">

44. Скрипты подключаются в самом конце файла, перед тегом "body".
<script src="js/script.js"> </script> 
"type="text/javascript" - если появилась таая надпись, её нужно убирать, она устаревшая.
45. 
var name = "Siegerus";         - примеры переменных. "var" - устаревший вариант. Используют или "let"или "const".
let number = 7;
const pi = 3.14;

let leftBorderWidth = 200;   Если переменная состоит из нескольких слов то записывается имеено так - 1е слово с маленькой буквы,  2 е с большой и 3е тоже сбольшой.
                                       Типы данных.
//number -              цифры.
 //string  -                 строки, используются кавычки - ""   ''   `` .
 //true/false -        булиновый (логический тип данных.
 //null -                    когда чегото не существует.
 //undefined -      что то существует, но значения не имеет.  

let obj = {                 - комплексный тип данных, в нём описываются какие то структуры. Пишется в фигурных скобках "{}"
    name = 'apple',
    color = 'green',
    weight = 200
}

//Symbol            - технический тип данных, с ним редко работают.

alert (12323) - выводит на страницу то, что написать внутри в скобках. Отображается в модальном окне.
console.log ("refer") - выводит в консоль.
confirm ("Вам есть 18?") - можно вывести вопрос пользователю.

let answer = confirm ("Вам есть 18?");  //Задаём переменную, которая будет равна ответу на вопрос.
console.log (answer);               	                 //и она выведется в консоле в формате ответа true /false.

let answer = prompt ("Вам есть 18?", "");  с помощью "prompt " выведется поле, в которую можно будет ввести данные.
console.log (answer);                - и с помощью "console.log" выводим её в консоль.

let isChecked = true,                 // "&&" логический оператор "и". Консольвыведет true если и галочка будет стоять и мод.окно будет закрыто (пример).
        isClose = true;
console.log (isChecked && isClose); 

console.log (isChecked || isClose);    // "||"  оператор "или".

if (2*4 == 8*1) {                                    Если выражение будет верно, то в консоли выведется "верно."        
    console.log ('Верно')
}

"==" означает "равно " , а "=" - это присваивание значения.


let answer = confirm ("Вам есть 18?"); 
if (answer == true) {          
    console.log('Проходите')
} else {
    console.log('Уходи');
}


let num = 50;
if (num < 49) {                  Если "num" будет меньше 49 - выведеться "неправильно"
    console.log('Неправильно')   
} else if (num > 100) {          Если будет больше 49, но при этом больше 100, то выведеться "Много"
    console.log('Много')       
} else {                         Если и это условие не выполняется, то выведется "верно".
    console.log('Верно')  
}



for (let i = 1; i < 8; i++) {
console.log(i)  }                        //Для переменной "i", котрая равна 1, будет продолжаться цикл  до тех пор, пока она не достигнет 8ми. 
		              //Каждый шаг (итерацию) будет прибавляться i+1. Цикл -вывод в консоль значение i. 


function logging() {               // "logging" - дали название функции.
    console.log(312312)
}

logging();                        // Теперь вызываем функцию


function logging(a, b) {          
    console.log(a + b);
}

logging(4, 5); 

46.  добавление слайденра. 
	1 - Делаем структуру в своём проекте вида - 
	  <div class="your-class">
	  <div>your content</div>
 	  <div>your content</div>
  	  <div>your content</div>
	  </div>                                  копируем с сайта "slick"
	2 -  Добавляем css файл в head 
	<link rel="stylesheet" type="text/css" href="slick/slick.css"/> - скачан с сайта.
	3 - в конце сраницы перед "body" добавляем 2 скрипта  библиотеки и скрипт самого слика.
	  Ссылки на библиотеки на сайте в usage разделе, а скрипт слик тоже скачан.
	<script type="text/javascript" src="https://code.jquery.com/jquery-1.11.0.min.js"></script> (в пути нужно добавить "https:", что бы нормально грузилось без сервера.)
	<script type="text/javascript" src="https://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
	<script type="text/javascript" src="slick/slick.min.js"></script>
	4 - И подключаем свой скрипт файл в самом конце. Пишем туда :
	$(document).ready(function(){
   	 $('.carousel__inner').slick();
 	 });
	
	5 - Вместо "'.carousel__inner'" пишем свой класс, который указали. Даль в фигурные скобки можно скопировать с сайта слик из раздела демо разные настройки
                          слайдеров.

$(document).ready(function(){
    $('.carousel__inner').slick({
       // dots: true,                     //"dots" - кружочки внизу, их можно застилизовать.
        speed: 300,
        slidesToShow: 1,               //  "slidesToShow" - сколько слайдов показывать за раз.
        variableWidth: true,          // "variableWidth" - что бы слайдер сам пдстраивал картинки разной высоты внутри слайдера.
        //autoplay: true,            // автопереключение слайдера.
       // autoplaySpeed: 2000,
        //fade: true,
        //cssEase: 'linear'
        //arrows: false               // включение и выключение стрелочек.
        prevArrow: '<button type="button" class="slick-prev"><img src="icons/left_arrow.svg"></button>' ,  // добавляем свои стрелочки. Сами строки копируем с сайта слик.
				И там внизу где настройки находим их, стираем текст и добавляем свои картинки.Обязательно сохранять синтаксис.
        nextArrow: '<button type="button" class="slick-prev"><img src="icons/right_arrow.svg"></button>'
    });
  });

46. Owl Carousel - альтернатива Slick у. 

Tiny - slyder.

const slider = tns({
    container: '.carousel__inner',
    items: 1,
    slideBy: 'page',
    controls: false,
    responsive: [ {                                           - адаптация
            992: {
              edgePadding: 200,
              gutter: 20,
              items: 1
            }
        }
    ]
  }
  );

  document.querySelector('.prev').addEventListener('click', function ()   {   
    slider.goTo('prev');                                                                                                   
  }; 					 -переназначение кнопок. Так же все стандартные элементы слайдера можно стилизовать через стили которые уже заданы.
  document.querySelector('.next').onclick = function () {
    slider.goTo('next');
  };

47. Что бы выровнять надпись в высоту по центру блока, нужно задать line height почти равный высоте этого блока. (на 2рх меньше)

48. Для элемента "hr" принято задавать отступы в две стороны, и margin top и margin bottom.
49.overflow: hidden;               // то, что будет выходить за пределы "catalog=item", то будет скрываться,

50.
$(document).ready(function(){     
  });

51.
  $('ul.catalog__tabs').on('click', 'li:not(catalog__tab_active)', function() {
        $(this) 
          .addClass('catalog__tab_active').siblings().removeClass('catalog__tab_active')
          .closest('div.container').find('div.catalog__content').removeClass('catalog__content_active').eq($(this).index()).addClass('catalog__content_active');
      });
  });

  // Берём все теги "ul" с классом ".catalog__tabs" и кликаем в нём по "li" , у которых НЕ будет класс "catalog__tab_active"
  // "(this)" - это тот элемент, на который мы нажали. И для этого "li" на который мы нажали и которого нет класса активности,
  // для него добавляем класс активности ".addClass('catalog__tab_active')". Дальше, все соседние классы ".siblings()"
  // удаляют класс активности ".removeClass('catalog__tab_active')", если он у них присутствовал.
  //Дальше берём ближайший элемент "div", блок(у нас это "container", но можно было обернуть отдельно всю структуру с табами в какой то блок)
  // ".closest('div.container')" и находим там блок "catalog__content" - ".find('div.catalog__content')".
  //Убираем у этого блока класс активности - ".removeClass('catalog__content_active')".
  //".eq($(this).index())" - эта часть команды получает номер элемента, на который мы нажали.Нажали на 2ой таб - будет индекс 2 и т.д
  // И для соответствующего индеса назначается соответствующий номер контента, которому даём класс активности.