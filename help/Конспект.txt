footer
	padding: 14px 23px 39px 23px
	position: relative
	.footer_line
		margin: 0 auto
		width: 299px
		height: 4px
		background-color: $first_color
	.links_wrapper

	.social_block
		position: absolute
		top: 51px
		display: flex
		justify-content: center
		width: 160px
	.social_links
		justify-content: center
		align-items: center
		margin: 0  4px
		display: flex
		width: 32px
		height: 32px
		background-color: #070716
		border-radius: 100px
		i
			color: #fff
			
			
	.footer_main_links
		display: flex
		justify-content: center
		margin: 34px auto 0 auto
		
	.main_links_item
		padding: 0 23px
		display: block
		text-decoration: none
		font-size: 15px
		font-weight: 300
		text-transform: uppercase
		color: #070716
		text-decoration: none
		text-align: center
	.footer_sublinks
		margin-top: 15px
		display: flex
		justify-content: center
	.sublinks_item	
		padding: 0 11px
		display: block
		text-decoration: none
		font-size: 11px
		font-weight: 300
		text-transform: uppercase
		color: #999999
	.store_block
		position: absolute
		top: 52px
		right: 23px
		img
			display: block
			width: 296px
			height: 27px
		
	.russian
		margin-top: 19px
		font-size: 11px
		font-weight: 400
		text-transform: uppercase
		color: #1fbad6
		text-align: center


1. Главный файл - это всегда index.html
2. Не называть на кирилице, не называть транслитом
3. Для запуска локального сервера, что бы не обновлять постояяно страницу в браузере, запускается локальный север (Нажать go live  внизу в VSCode)

                      h1                                                    	
                  h2    h2			- Должна соблюдаться логическая структура заголовков. Если есть h1 , то обязательно потом должен идти h2 и только потом - h3
           h3   h3    h3    h3                                             Это сказывается на поисковой выдаче в поисковиках

4. Симантические теги (header, footer, main, nav, section и т.д) улучшают оптимизацию сайта и сайт будет выше в приоритете у поисковиков 

5. Блочные элементы "прожорливы" и каждый занимает всю ширину страницы. Строчные распологаются подряд в строке. Строчно-блочные имеют все св-ва блоков
и при этом могут распологаться один за другим в строке. Какой элемент к какому типу принадлежит, можно посмотреть в справочнике.
6.position absolute работает только относительно родительского блока у которого будет position relative. Что бы абсолютно спозиционировать какойто элемент внутри
родительского блока, у этого родительского блока должен быть  position relative. Иначе элемент будет абсолютно позиционироваться относительно всей страницы.
7.Единица измерения "%" в css является  относительной и зависит от размера родительского элемента. Например Если у родителя ширина 100px, то если поставить єлименту
 ширину 50%,  ширина будет равна 50px. Так же относительная величина "em" - она зависит от того какого размера шрифт у элемента (почти не использкуется).

Еденица "rem" - зависит от того , какой размер шрифта у всего документа. Например если шрифт =20рх , а величину rem установить =30, то размер элемента будет = 600рх 
(это тоже редко используется)

Единицы  vh, vw - единицы зависящие от высоты и ширины экрана. Одна еденица vh/vw  экрана = одной сотой высоты/ширины экрана.
8, Когда стилизуем что то с помощью тегов (<div> и т.д), то эти стили получаются наименее специфичными ,таких тегов на странице может быть много. Классы уже более специфичны, т.к они устанавливаются определённым элементам. Если у элемента несколько классов , то специфичней (приоритетней) будет класс стиллизованный последним, он будет перебивать предыдущие. Самым спицифичным будет ID, он будет перебивать все. За исключением, если стилизовать в строке  в самом html документе в фориате  "style="   " "/
  Когда есть пробел  ".wrapper   .element" - То это понимается как - "В класс wrapper вложенный класс element" (Такое уточнение,вложенность будет специфичнее, чем просто класс)
  Когда без пробела - "#second.element" - Читается как "Элемент #second. , для которого установлен класс element". (Такое уточнение будет специфичней (приоритетней) чем просто  ID #second ) 
9.Когда копируем стили из дизайнерских редакторов, нужно обращать внимание на межстрочный интервал (line-height:). Из за него тексты из блоков могут  наезжать друг на друга. Если У текста только одна строка, то лучше вообще его не копировать.
10. Стараться велать под одну гребёнку - отступы у всех объектов либо сверху, либо снизу.

11 .waiting_wrapper>.waiting_item*3>img.waiting_img+.waiting_descr    - Emmet может раскрыть ьакую строчку следующим образом:
    
    <div class="waiting_wrapper">                                             
            <div class="waiting_item">                                         
                <img src="" alt="" class="waiting_img">                           
                <div class="waiting_descr"></div>                                
            </div>
            <div class="waiting_item">
                <img src="" alt="" class="waiting_img">
                <div class="waiting_descr"></div>
            </div>
            <div class="waiting_item">
                <img src="" alt="" class="waiting_img">
                <div class="waiting_descr"></div>
            </div>
        </div> 

12. Файл normalized.css нужен для сброса и нормализации стилей в разных браузерах. Подключается как и style.css  , но обязательно ДО него.  Вообще все дополнительные стили (и шрифты) лучше подключать до основного файла стилей.
Для своих проэктов нужно подключать нормализатор с расширением min, он позволяет сайту работать быстрее.

13.font-family: Verdana, Arial, Helvetica, sans-serif;   Шрифты слева направо - приоритет в порядке убывания. Если никаких шрифтов в системе не будет, то отобразиться 
 sans-serif - просто какой то дефолтный шрифт без засечек. ( serif - с засечками).

14. Шрифты можно подключать с сайта https://fonts.google.com/. Больше некольких шрифтов обычно не подключают, т.к. тормозит загрузку сайта.
Также шрифты обычно подключают через стандартный тег link, а не @import.
Ещё шрифты можно подключить локально скачав, например, с https://webfonts.pro и добавив в свой проект. Там скопировать код (нажать на красную "web") в свой style.css  и подправить его, указав корректные пути.

"html {                                                             
    font-family: 'Roboto', sans-serif;              /* Так включаем шрифт который скачали локально или подключили с гугла. */
}"

15. Чаще всего используются форматы шрифтов woff и   woff2.

16. Bootstrap библиотеку можно подключить через ссылку, а можно скачать и подключить локально (Основной подключаемый файл будет bootstrap.min.css)
Если используем бутстреп, то отдельно нормалайз подключать не нужно, он по факту уже встроен (bootstrapreboot.css).
 Правила БТ. 
1. Что бы использовать колоночную верстку, обязательно нужен "container" или "container-fluid".
2. Колонки "col" всегда создаются в строках "row".
3. Колонки можно модифицировать.
<!-- Задаётся ширина колонок. Ширина измеряется в "макеточных" колонках.Всего их 12 -->
<!--Таким образом задаём сколько "макеточных"колонок будет вмещать каждая колонка. -->
17. Если из БТ нужна только сетка для колоночной верстки, то подключаем только "grid.css". Можно также отдельно bootstrap-reboot.css.

18.  В ссылки можно делать заглушки, прописывая в href "#". Тогда при нажатии на ссыску она будет вести на ту же страницу.

19. Отступы сверху и снизу в секциях лучше делать padding ами. *?
20. Если элемент занимает пространство больше, чем контент в нём и из за этого отодвигается по вертикали, то высоту расположения можно менять с помощью "line-height".

21. Чтобы преобразовывать препроцессоры в css код, есть несколько способов.
 1 - Программы. Scout-app , Kюoala.

22." &_color" - "&" - амперсанд. Пишется вместо названия класса, когда оно одинаковое, а уже после неё дописывается отличие.
23. "$text_color: red" - так задаются переменные. Задаются вначале css или sass документа, ну или отдельным файлом.
24". @mixin box
    display: block
    width: 125px
    height: 125px
    background-color: yellow " - Так задаются миксины - куски кода, набор свойств.
 
   "button
        @include box"  - А так миксины включаются инклюдом для нужных селекторов.
25. Есть альтернативный синтаксис. Вместо миксина можно использовать "=box", а вместо инклюда "+box".
26. Псевдоклассы. Нужны что бы управлять состоянием элемента (элемент меняется при наведении, после посещения и т.д).
27. Псевдоклассы и псевдоэлементы ы синтаксисе между собой ничем не отличаются.
28."&:before
        content: ''
        display: block
        height: 5px
        background-color: black"- Так можно добавлять перед нужным элеиентом,например, какой-то блок и т.д.

"&:before
        content: ''
        width: 0%
        display: block
        height: 2px
        background-color: black
    &:hover
        &:before
            content: ''
            width: 100%
            display: block
            height: 2px
            background-color: black
            transition: 0.5s all" - Задали что перед элементом будет блок, но его не будет видно - "width: 0%", 
                                                      А при наведении ("hover"), он будет появляться - width: 100%. 
             " transition"  - св-во, отвечающее за скорость анимации.

29. left: 50%
       transform: translateX(-50%)

30. Можно использовать иконочные шрифты. Для этого зайти на https://fontawesome.com/ и скопировыть оттуда ссылку в head проекта (подключить перед "style.css   )
     Дальше в поиске на сайте найти нужную иконку и скопировать её тег и класс себе в проект, в то место, где она будет находиться..

background: linear-gradient(-45deg,#070716 50%, #ffc61a 50%)
31. По умолчанию в папке Sass будут компилироваться все файлы. Когда в папке создаём другие файлы, которые будем потом включать в основной файл, начинаем их
название с нижнего подчёркивания.
32. @media (max-width: 1200px) - та приминяется медиа. При разрешении в 1200рх будут применяться следующие значения.
      @media - в основном style нужна подключать уже после всех блоков и т.д
.menu
        &_item
            padding-right: 20px  
        &_link
            font-size: 13px 
                                             Классы колонок в БТ указываются от меньшего к большему. НУжно подбирать кол-во для каждой контр. точки. Например, если больших колонок 
нужно было 2 , и отступных колонок тоже 2, то в точке по-меньше может быть нужно уже 3 колонки и отступ 1. В меньшем классе и колонки меньше.

33. 	xs
<576px	sm
≥576px	md               -Для каждой контрольной точки проверяем адаптацию. И подбираем нужные размеры, отступы в меню разработчика.
≥768px	lg                  После того, как подобрали нужные значения для данной точки, уменьшаем до размеров следующей точки, если всё верно подобрали,
≥992px	xl                   на протяжении всего уменьшения   всё должно отображаться корректно.
≥1200px	xxl
≥1400px

@media (max-width: 991px)  - задают именно 991рх а не 992, потому что на 991 идёт переключение на другие колонки.
34. Что бы скрыть какой то элемент можно просто написать "display: none".
35. Для разрешений уже больше 768рх лучше адаптировать контент в 2 колонки, в одну смотрится не очень.
36. Что бы сделать ссылку удобнее для моб.устройств, можно сделать её блочной и расширить как нужно. Так же добавить пэддинги, что бы не промахиваться.
37.При мобильной адаптации эффекты ховер обычно убираются.

38. <li class="menu_item"><a class="menu_link" href="#require">Со своим автомобилем</a></li>   <!-- Локальная ссылка. -->
       <section class="require" id="require">  					              <!-- id для локальной ссылки. -->
39. shift+f5 - перезагрузка страницы со сбросом кэша.
40. git  команды. "git init" - инициализация, при первом запуске. Создаётся репозиторий в той папке, в которой инициировали через консоль.
	              "git config" - настройки.
 	              "git config --global user.name "Siegerus""        Установка пользователя и мейла глобально.
	               "git config --global user.email ivanoffsiegerus@gmail.com"
	               "git config --local user.name "Siegerus""       Установка пользователя и мейла локально в проект.
	               "git config --local user.email ivanoffsiegerus@gmail.com"		
	              "git status"	- статус файлов на данный момент.
 	               "git add -A" - Добавить все файлы, которые есть в папке.
	               "git add "название файла"." - добавляет конкретный файл. Если перед точкой расширения поставить звёздочку, то добавятся все файлы этого типа.
	             "git commit -a -m"first commit"  " - создание контр.точки. "- а" - всех файлов. "-m" - коментарии к точке, После "m"  нет пробела.
	              "git log" - лог контр. точек.
	              "git remote add origin https://github.com/Siegerus/test_project.git" Связываем локальный репозиторий с удалённым. Строку копируем с гитхаба.
 	               "git push -u origin master" - загружаем файлы с локального на удалённый репозиторий.
	                "git clone" - клонируем проект из репозитория на другой комп. При клонировании гит сам связывает с удалённым репозиторием автоматически.
	                (git clone https://github.com/Siegerus/test_project.git   "название папки"  находяь в папке, можем указать название нрврй папки, к которую клонируется                                                                                                                                                                                     реаозиторий. Или он склонируеться в текущую папку  )
 	               "git pull" - загрузка обратно из репозитория проекта уже с изменениями, которій клонировали на другой комп.
	                "git remote remove origin" - отвязать репозиторий.


	правая кнопка мыши - open git bash - открыть консоль гита в папке 
	"echo >> README.md" -создать фай ридми через консоль в папке
	"git add *html" - добавить файлы с форматом хтмл

	git checkout -b new_branch 9df7f87d27c849cb80614833f5ea539726129b62 - созлать новую ветку от комита (сразу переключится на неё)
	git checkout -b new_branch просто новая ветка от мастера и переключение на неё
	git checkout master - вернуться на главную ветку
	git checkout -b new_branch - переключиться обратно на созданную
	
	Слияние веток.
	Переключится на ветку В которую будем сливать(например master), потом пишем "git merge (название ветки которую сливаем)". 
	Будут применены изменения слитой ветки (а не master), 
	git merge --squash "название ветки" - слияние с объединением комитов. После мержа нужно сделать новый комит
	
	Находясь на любой ветке, можно переключаться между коммитами:
	git checkout "номер коммита". Head - текущее положение, где мы смотрим в данный момент.
	git checkout "название ветки" - Вернуть Head  к последнему комиту
	Для переключения между внтками лучше использовать git switch, Для переключения между коммитами - git checkout
	git switch -c "название ветки" - новая ветка   от коммита, в котором сейчас смотришь(Head)

	git branch -d "name"  - удалить ветку (если с "-D" удаляет принудительно).
	git branch -v  -  Список всех веток с последним комитом

	Добавить разные форматы лога
	git log --pretty=oneline - односточный лог.
	git config --add format.pretty oneline
	git config --add format.pretty "%h %an: %s"
	git config --add format.pretty "%h%x09%an%x09%ad%x09%s"

	git rebase -i HEAD~3 -сжать коммиты

41.   npm init - инициализация менеджера пакетов.
      "npm install --global gulp-cli"  - установка утилиты, которая позволяет работать с галпом  через терминал  При первом запуске делаем сначала глобально.   
      "npm install  gulp-cli --save-dev" - Пслеэтго уснавливем уже локльно в проект.
      "npm install --save-dev gulp"- дальше ставим сам гулп.
       После этого можем устанавливать пакеты с https://www.npmjs.com/. Копируем там строку и вбиваем в консоль. В конце каждой строки добавляем "--save-dev".

   "npm install -g browser-sync" этот пакет ставим сначала глобально. Если возникает ошибка, что нужно установить о имении адм, то пишем "sudo npm install -g browser-sync".
  "npm install  browser-sync --save-dev " - потом локально.
На https://www.npmjs.com/ у каждого пакета на странице будет строка с установкой. Гдето может быть нужно добавлять --save-dev
Можно устанавливать предыдущие версии утилит. Справа сверху строка через @.
   Список нужных пакетов:    
    "browser-sync": "^3.0.2",
    "gulp": "^4.0.2",
    "gulp-autoprefixer": "^9.0.0",
    "gulp-clean-css": "^4.3.0",
    "gulp-cli": "^2.3.0",
    "gulp-rename": "^2.0.0",
    "gulp-sass": "^5.1.0",
    "sass": "^1.71.1"

"dependencies": {
    "gulp-imagemin": "^7.1.0"
  }
    После установки пакетов создаём файл с названием "gulpfile.js". Создаём в проекте, рядом с package.json .
gulpfile.js  и package.json  можно потом скопировать в другой проект и псле команды npm i  у становяться все пакеты которые были.
npm update --save    - обновить все плагины до последних версий

install -g npm-check-updates.
You can then use these commands:
ncu                  Checks for updates from the package.json file
ncu -u             Update the package.json file
npm update --save        Update your package-lock.json file from the package.json file

"npm install  gulp-cli --save-dev       - поставить заново после обновление галп

npm i gulp-imagemin@7.1.0 --save-dev          вернуть  нужные версии аввтопрефиксера и имгмин
npm i gulp-autoprefixer@8.0.0 --save-dev


41 host - s4.serv00.com  user - 	f5531_school_siegerus pass  *****

42.БЭМ - блок элемент модификатор. Основное правило при создании блока то, что он сможет быть повторно использован. Блокам не стоит задаватьпозиционирование
 , внешнюю геометрию
(мрджины и т.д.). Блоки могут вкладываться друг в друга. У блоков не всегда должны быть элементы, их может не быть.
Элемент. Элемент не может быть использован в отрыве от блока.  "search-form__imput" -  Блок "serch-form" и элемент блока "imput". Элемент указывается через "__".
Модификатор.Пример. "search-form search-form_disabled " - блок и модификатор блока. "search-form__button search-form__button_disabled"- элемент и модификатор.
Модификатор пишется через одно подчеркивание. Модификатор не может использоваться отдельно от элемента  или от блока , т.е мы должны прописывать 2 класса.
 Один клас - это блок или элемент, а второй - модификатор.
Блоки и элементы могут быть вложены друг в бруга, главное использовать это только в верстке,  не в названииях классов.

43. <form action="#">                   		" action="#" - тут указывается файл, в котором будет происходить обработка формы.
            <label for="first">First input</label>
            <input id="first" type="text">
        </form>                                                           -  Пример формы с инпутом. Лайбл (подпись)для инпута назначается через id.


<label for="first">First input                         -    Также инпут кладут внутрь лейбла, что бы его можно было удобно стилизовать.
                <input id="first" type="text">
</label>

<input required placeholder="Ваш E-mail" type="email">     -  "required" -  задаёт обязательный к заполнению импут .

<input type="submit" value="заказать кОНСУЛЬТАЦИЮ">  -   два различных варианта сделать кнопку сабмит (отправка данных из формы на сервер).
<button>заказать кОНСУЛЬТАЦИЮ</button>                              - второй предпочтительней.

<input type="reset">                                                                              - кнопка для сброса.

<textarea name="" ></textarea>                  -  Поле для текста. В стилях потом такому полю обычно задают "resize: none", что бы поле нельзя было растягивать и ломать верстку.

<input name="name" required placeholder="Ваше имя" type="text">    -  Обязательно нужно указывать атрибут "name"  для последующей обработки данных на сервере и т.д.
<input name="phone" required placeholder="Ваш телефон" type="tel"> A
<input name="email" required placeholder="Ваш E-mail" type="email">

44. Скрипты подключаются в самом конце файла, перед тегом "body".
<script src="js/script.js"> </script> 
"type="text/javascript" - если появилась таая надпись, её нужно убирать, она устаревшая.
45. 
var name = "Siegerus";         - примеры переменных. "var" - устаревший вариант. Используют или "let"или "const".
let number = 7;
const pi = 3.14;

let leftBorderWidth = 200;   Если переменная состоит из нескольких слов то записывается имеено так - 1е слово с маленькой буквы,  2 е с большой и 3е тоже сбольшой.
                                       Типы данных.
//number -              цифры.
 //string  -                 строки, используются кавычки - ""   ''   `` .
 //true/false -        булиновый (логический тип данных.
 //null -                    когда чегото не существует.
 //undefined -      что то существует, но значения не имеет.  

let obj = {                 - комплексный тип данных, в нём описываются какие то структуры. Пишется в фигурных скобках "{}"
    name = 'apple',
    color = 'green',
    weight = 200
}

//Symbol            - технический тип данных, с ним редко работают.

alert (12323) - выводит на страницу то, что написать внутри в скобках. Отображается в модальном окне.
console.log ("refer") - выводит в консоль.
confirm ("Вам есть 18?") - можно вывести вопрос пользователю.

let answer = confirm ("Вам есть 18?");  //Задаём переменную, которая будет равна ответу на вопрос.
console.log (answer);               	                 //и она выведется в консоле в формате ответа true /false.

let answer = prompt ("Вам есть 18?", "");  с помощью "prompt " выведется поле, в которую можно будет ввести данные.
console.log (answer);                - и с помощью "console.log" выводим её в консоль.

let isChecked = true,                 // "&&" логический оператор "и". Консольвыведет true если и галочка будет стоять и мод.окно будет закрыто (пример).
        isClose = true;
console.log (isChecked && isClose); 

console.log (isChecked || isClose);    // "||"  оператор "или".

if (2*4 == 8*1) {                                    Если выражение будет верно, то в консоли выведется "верно."        
    console.log ('Верно')
}

"==" означает "равно " , а "=" - это присваивание значения.


let answer = confirm ("Вам есть 18?"); 
if (answer == true) {          
    console.log('Проходите')
} else {
    console.log('Уходи');
}


let num = 50;
if (num < 49) {                  Если "num" будет меньше 49 - выведеться "неправильно"
    console.log('Неправильно')   
} else if (num > 100) {          Если будет больше 49, но при этом больше 100, то выведеться "Много"
    console.log('Много')       
} else {                         Если и это условие не выполняется, то выведется "верно".
    console.log('Верно')  
}



for (let i = 1; i < 8; i++) {
console.log(i)  }                        //Для переменной "i", котрая равна 1, будет продолжаться цикл  до тех пор, пока она не достигнет 8ми. 
		              //Каждый шаг (итерацию) будет прибавляться i+1. Цикл -вывод в консоль значение i. 


function logging() {               // "logging" - дали название функции.
    console.log(312312)
}

logging();                        // Теперь вызываем функцию


function logging(a, b) {          
    console.log(a + b);
}

logging(4, 5); 

46.  добавление слайденра. 
	1 - Делаем структуру в своём проекте вида - 
	  <div class="your-class">
	  <div>your content</div>
 	  <div>your content</div>
  	  <div>your content</div>
	  </div>                                  копируем с сайта "slick"
	2 -  Добавляем css файл в head 
	<link rel="stylesheet" type="text/css" href="slick/slick.css"/> - скачан с сайта.
	3 - в конце сраницы перед "body" добавляем 2 скрипта  библиотеки и скрипт самого слика.
	  Ссылки на библиотеки на сайте в usage разделе, а скрипт слик тоже скачан.
	<script type="text/javascript" src="https://code.jquery.com/jquery-1.11.0.min.js"></script> (в пути нужно добавить "https:", что бы нормально грузилось без сервера.)
	<script type="text/javascript" src="https://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
	<script type="text/javascript" src="slick/slick.min.js"></script>
	4 - И подключаем свой скрипт файл в самом конце. Пишем туда :
	$(document).ready(function(){
   	 $('.carousel__inner').slick();
 	 });
	
	5 - Вместо "'.carousel__inner'" пишем свой класс, который указали. Даль в фигурные скобки можно скопировать с сайта слик из раздела демо разные настройки
                          слайдеров.

$(document).ready(function(){
    $('.carousel__inner').slick({
       // dots: true,                     //"dots" - кружочки внизу, их можно застилизовать.
        speed: 300,
        slidesToShow: 1,               //  "slidesToShow" - сколько слайдов показывать за раз.
        variableWidth: true,          // "variableWidth" - что бы слайдер сам пдстраивал картинки разной высоты внутри слайдера.
        //autoplay: true,            // автопереключение слайдера.
       // autoplaySpeed: 2000,
        //fade: true,
        //cssEase: 'linear'
        //arrows: false               // включение и выключение стрелочек.
        prevArrow: '<button type="button" class="slick-prev"><img src="icons/left_arrow.svg"></button>' ,  // добавляем свои стрелочки. Сами строки копируем с сайта слик.
				И там внизу где настройки находим их, стираем текст и добавляем свои картинки.Обязательно сохранять синтаксис.
        nextArrow: '<button type="button" class="slick-prev"><img src="icons/right_arrow.svg"></button>'
    });
  });

46. Owl Carousel - альтернатива Slick у. 

Tiny - slyder.

const slider = tns({
    container: '.carousel__inner',
    items: 1,
    slideBy: 'page',
    controls: false,
    responsive: [ {                                           - адаптация
            992: {
              edgePadding: 200,
              gutter: 20,
              items: 1
            }
        }
    ]
  }
  );

  document.querySelector('.prev').addEventListener('click', function ()   {   
    slider.goTo('prev');                                                                                                   
  }; 					 -переназначение кнопок. Так же все стандартные элементы слайдера можно стилизовать через стили которые уже заданы.
  document.querySelector('.next').onclick = function () {
    slider.goTo('next');
  };

47. Что бы выровнять надпись в высоту по центру блока, нужно задать line height почти равный высоте этого блока. (на 2рх меньше)

48. Для элемента "hr" принято задавать отступы в две стороны, и margin top и margin bottom.
49.overflow: hidden;               // то, что будет выходить за пределы "catalog=item", то будет скрываться,

50. Применение jquery.По "$" можно обратиться ко всем элементам на странице через селекторы (классы,теги,ид)
$(document).ready(function(){     
  });

51.
$(document).ready(function(){       //$(document).ready(function(){  }); - прописывается только 1 раз. Дальше уже всё пишется внутрь её.
    $('.carousel__inner').slick({
       // dots: true,                     //"dots" - кружочки внизу, их можно застилизовать.
        speed: 300,
        slidesToShow: 1,               //  "slidesToShow" - сколько слайдов показывать за раз.
        variableWidth: true,          // "variableWidth" - что бы слайдер сам пдстраивал картинки разной высоты внутри слайдера.
        //autoplay: true,            // автопереключение слайдера.
       // autoplaySpeed: 2000,
        //fade: true,
        //cssEase: 'linear'
        //arrows: false               // включение и выключение стрелочек.
        prevArrow: '<button type="button" class="slick-prev"><img src="icons/left_arrow.svg"></button>' ,  // добавляем свои стрелочки.
        nextArrow: '<button type="button" class="slick-next"><img src="icons/right_arrow.svg"></button>' , // пути как пишем как будто мы в index html, т.к скрипты работают напрямую.
        responsive: [                      // адаптируем слайдер для максимального разрешения в 768
            {                             // копируем с сайта
                breakpoint: 992,
                settings: {
                arrows: false,         // Для маленьких экранов убираем стрелочки и добавляем кружочки.
                dots: true 
                }
            }
        ]
    });

    $('ul.catalog__tabs').on('click', 'li:not(catalog__tab_active)', function() {
        $(this) 
          .addClass('catalog__tab_active').siblings().removeClass('catalog__tab_active')
          .closest('div.container').find('div.catalog__content').removeClass('catalog__content_active').eq($(this).index()).addClass('catalog__content_active');
      });
  

  // Берём все теги "ul" с классом ".catalog__tabs" и кликаем в нём по "li" , у которых НЕ будет класс "catalog__tab_active"
  // "(this)" - это тот элемент, на который мы нажали. И для этого "li" на который мы нажали и которого нет класса активности,
  // для него добавляем класс активности ".addClass('catalog__tab_active')". Дальше, все соседние классы ".siblings()"
  // удаляют класс активности ".removeClass('catalog__tab_active')", если он у них присутствовал.
  //Дальше берём ближайший элемент "div", блок(у нас это "container", но можно было обернуть отдельно всю структуру с табами в какой то блок)
  // ".closest('div.container')" и находим там блок "catalog__content" - ".find('div.catalog__content')".
  //Убираем у этого блока класс активности - ".removeClass('catalog__content_active')".
  //".eq($(this).index())" - эта часть команды получает номер элемента, на который мы нажали.Нажали на 2ой таб - будет индекс 2 и т.д
  // И для соответствующего индеса назначается соответствующий номер контента, которому даём класс активности.
    
    $('.catalog-item__link').each(function(i){
        $(this).on('click', function(e){
            e.preventDefault();
            $('.catalog-item__content').eq(i).toggleClass('catalog-item__content__active');
            $('.catalog-item__list').eq(i).toggleClass('catalog-item__list__active');
            })

        });
    

    //Каждый "each()"Элемент, с классом ".catalog-item__link". для них будет выполняться "function".
    //Выбранный элемент "$(this)", когда на него будут кликать ".on('click')", будет выполняться "function" "e.preventDefault()"
    //(это отменит стандартное поведение браузера при переходе по ссылке.) и элемент с классом "catalog-item__content" будет переключать
    //свой класс ".toggleClass()" на "catalog-item__content__active" (".toggleClass()" - переключение работает так - если класс есть,
    //то он будет убираться, если нет, то будет добавляться).И всё тоже самое дальше для ".catalog-item__list".
    //"eq(i)" - привязка по индексу. Говорим, что если кликаем по эелементу "i" , то переключение будет происходить только у элемента "i", 
    // а не на всей странице.
        // Дальше тоже самое для кнопки "НАЗАД"

    $('.catalog-item__back').each(function(i){
        $(this).on('click', function(e){
            e.preventDefault();
            $('.catalog-item__content').eq(i).toggleClass('catalog-item__content__active');
            $('.catalog-item__list').eq(i).toggleClass('catalog-item__list__active');
            })

        });
    

    // ДАльше тоже самое, только оптимизированный вариант.
    // Создаём функцию, которую назовём "toggleSlide" с аргументом "(item)"
    // Теперь вызываем функцию и вместо "(item)" подставляем нужный нам элемент 
    // toggleSlide('.catalog-item__link')
    // toggleSlide('.catalog-item__back')
    
    function toggleSlide(item) {
        $(item).each(function(i){
            $(this).on('click', function(e){
                e.preventDefault();
                $('.catalog-item__content').eq(i).toggleClass('catalog-item__content__active');
                $('.catalog-item__list').eq(i).toggleClass('catalog-item__list__active');
                })
    
            });
    };
    toggleSlide('.catalog-item__link')
    toggleSlide('.catalog-item__back')
}); 
52. "iframe" - с помощью этого тега можно в ставлять в свой сайт кусок другого сайта, только как либо менять его нельзя. Так встраивают видео с ютьюба, карты и т.д.
53. Интерактивные карты.
 Находим нужный адрес Google - нажимаем "поделиться" - "встраивание карт" - копируем там ссылку и втавляем куда нужно себе в код.
Дальше можно с помощью атрибутов задать ширину и высоту карты. Можно поместить эту iframe карту ещё в какой то блок и дальше стилизовать.

В Яндексе находим конструктор карт - заполняем название/описание - вбиваем адрес - можно нажат на метку и добавить ей название/цвет/тип/иконку. - сохранить и продолжить - выбрать шрину/высоту - получить код карты.Лучше выбирать "iframe ", так удобней и оптимизация лучше. Но если вставить скриптом, то можно ещё отключить скролл.

Адреса нужно писать в теге "<address>" . Так поисковики будут индексировать адресс.
54. Если заднему фону блока нужно указать прозрачность, делать это нужно через rgba и альфаканал.  Иначе прозрачным будет не только фон, но и весь контент.

55. $('[data-modal=consultation]').fadeOut(); Так можно ссылаться на data атрибут. С помощью "fadeOut()"  можно проверить, верно ли сослались на нужные элементы (они плавно скроются со страницы)


56. //Так можно ссылаться на data атрибут. С помощью "fadeOut()"  можно проверить, верно ли сослались на нужные элементы (они плавно скроются со страницы)
    /* $('[data-modal=consultation]').fadeOut(); */
    $('[data-modal=consultation]').on('click', function() {
        $('.overlay, #consultation').fadeIn('slow');
    });
    $('.modal__close').on('click', function() {
        $('.overlay, #consultation, #order, #thanks').fadeOut('slow')
    });

    //По клику на элементы с нужным дата-атрибутом, будет происходить фукция - наж затемнённый экран ".overlay'", который по умолчанию скрыт,
    //он будет показываться ".fadeIn();" То же и с модальным окном "#consultation".Дальше по аналогии делаем,что бы всё скрывалось ".fadeOut()"при нажатии на крестик.

    /* $('.button_mini').on ('click', function(){
        $('.overlay, #order').fadeIn('slow');     
    }); */

    $('.button_mini').each(function(i) {
        $(this).on('click', function() {
            $('#order .modal__descr').text($('.catalog-item__subtitle').eq(i).text());
            $('.overlay, #order').fadeIn('slow'); 
        });
    });

    //Делаем, что бы при клике на каждую кнопку, брался соответствующий текст из ".modal__descr". "(i)" отвечает номер элемента по порядку.
// "$('#order .modal__descr')" - говорим, что внутри нашего окна "order" есть элемент ".modal__descr". Дальше внутрь него будем помещать текст
//".text" , ктороый вытаскиваем из "'.catalog-item__subtitle'" 

57.
 Плагин-валидатор. Скачиваем с https://jqueryvalidation.org/ файл  jquery.validate.min.js. Подключаем его.
И там дальше на сайте во вкладке Methods и Plugin Methods есть различные правила настройки.


 //$('.feed-form').validate(); // Так включаем валид-плагин.Но так будет работать только 1вая форма с таким классом.(особенность плагина.)
    //Включаем через id. Даём id первой форме. Остальные указываем по id окон, что у такого то то окна с таким id, есть форма
   // $('#consultation-form').validate();
   // $('#order form').validate();
    $('#consultation form').validate({
        rules: {
            name: { // название поля обязательно должно быть указано в верстке
                required: true, // обязательность заполнения
               // minlength: 2,
                rangelength: [2, 23]
            },
            phone: {
                required: true
            },
            email: {
                required: true,
                email: true        //что бы вводить именно мейл   
            }
          },
          messages: {      // Так настраиваются сообщения при вводе.Так же все энадписи можно стилизовать посмотрев их класс в браузере в режиме разработчика
            name: {        
                required: "Пожалуйста, введите своё имя",
        //        minlength: jQuery.validator.format("Введите минимум {2} символа"),
                rangelength: jQuery.validator.format("Введите от {2} до {23} символов")
            },
            phone: "Пожалуйста, введите свой номер",
            email: {
              required: "Пожалуйста, введите свою почту",
              email: "Неправильный адрес почты"
            }
          }
    });

        // Дальше делаем функцию что бы не повторять код заново для следующих форм
    function valideForms(form) {
        $(form).validate({
        rules: {
            name: {
                required: true,
                rangelength: [2, 23]
            },
            phone: {
                required: true
            },
            email: {
                required: true,
                email: true 
            } 
          },
          messages: {      
            name: {        
                required: "Пожалуйста, введите своё имя",
                rangelength: jQuery.validator.format("Введите от {2} до {23} символов")
            },
            phone: "Пожалуйста, введите свой номер",
            email: {
              required: "Пожалуйста, введите свою почту",
              email: "Неправильный адрес почты"
            }
          }
    });
    };
     // и теперь вызываем эту функцию
    valideForms('#order form');
    valideForms('#consultation-form');

58.
 Маска ввода номера на сайте. С сайта https://plugins.jquery.com/maskedinput   скачиваем архив (или с сылки на гит справа ниже под download). 
В ахиве находим в папке dist   файл jquery.maskedinput.min и пдключаем его как обычно. На гитхабе так же есть документация.
Плагин не воспринимает атрибут "type=number", нужно убирать его или ставить "type=tel".

// Подключаем маску ввода номера
    $('input[name=phone]').mask("+7 (999) 999-99-99");  // ко всем инпутам с названием "name=phone" будеи прикреплена такая маска, её можно редактировать

59. Отправка писем.
Нужно скачать MAILER. Нужен уже настроенный вариант, с файлом smart, Кидаем эту папку в проект.


    // Отправка писем
    // Обращаемся ко всем формам на сайте, говорим, что когда будут сабмититься (отправляться0 все данные, то будет выполняться функция
    //по которой будет отменяться стандартное поведение браузера (перезагрузка страницы после отправки данных. А мыделаем по ajax - взаимодействие с сервером
    // без обновления страницы).Дальше обращаемся к встроенному в jquery ajax и настраиваем его. "type: "POST"" - говорим что мы будет отдавать
    //данные серверу, Дальше указываем обработчик, сам мейлер и путь к нему. 
    //Дальше указываем какие данные будет отправлять " data: $(this)" и обрабатываем данные специальным методом ".serialize()" , что бы сервер мог их принять
    //Потом говорим, что после того как данные отправяться и всё будет выполнено ".done", все мнпуты в форме - "$(this).find("input")" будут
    // становиться пустыми - .val(""). И говорим, что наша форма очищается "$('form').trigger('reset')". 
    //И "return false;" - завершающая конструкция.
    $('form').submit(function(e) {
        e.preventDefault();

        if (!$(this).valid()) { 
            return;            // От багов.Если форма не прошла валидацию,то дальнейшая функция прекращается.Что бы не отправлялись пустые данные с формы
        }

        $.ajax({
            type: "POST",
            url: "mailer/smart.php",
            data: $(this).serialize()
        }).done(function() {
            $(this).find("input").val("");

            $('#consultation, #order').fadeOut(); // делаем что бы после всего модальные окна закрывались
            $('.overlay, #thanks').fadeIn(); // и показывалось друго модальное окно с благодарностью

            $('form').trigger('reset');
        });
        return false;
    });

60. Если открыть иконку в редакторе, то по пути "<path fill="#c70101"" можно поменять цвет.

61.//Плавный скрол
    // " $("a").on('click'" -Берём все ссылки по клику."this.hash !== """ - значит, что значение после знака "#" не пустое, таки образом
    // обращаемся только к локальным ссылкам на странице(которые ссылаются на id).И если єто значение не пустое, то 
    // отменяем стандартное поведение - "e.preventDefault();" (получается что стандартную анимацию), 
    // залаём константу "hash", в которую кладём наш #id  - "const hash = this.hash"
    // и также говорим, что тогда у всей страницы будет анимация jquery "$('html, body').animate" , которая будет происходить скролом 
    // "scrollTop" от нашей константы "$(hash)" (".offset()" это значит отступ). И в конце функция по возвращению стандартного поведения - "window.location.hash = hash;"
    
    $("a").on('click', function(e) {
        if (this.hash !== "") {
          e.preventDefault();

          const hash = this.hash;
    
          $('html, body').animate({
            scrollTop: $(hash).offset().top
          }, 1500, function(){              //"1500" это скорость анимации 
            window.location.hash = hash;
          });
        }
      });

62.Правило, по которому задаются сss3 анимации - "@keyframes имя анимации { список правил }".

@keyframes heartbeat {
    from {                               // от какого состояния
        transform: scale(1);            //scale: -масштаб, (1)- это 100%
    }
    50% {                               // можно задавать разные промежуточные значения
        transform: scale(1.5);
    }
    to {                              // к какому состоянию
        transform: scale(1);
    }
}


 &_animated {    //модификатор для анимации // задаём анимацию
            animation: heartbeat 0.8s ease infinite; // всё одной строкой . Миниму 2 первых параметра - название анимации и продолжительность
            animation-name: heartbeat;         
            animation-duration: 0.8s;              // время анимацииW
            animation-timing-function: ease;    // тип тайминга анимации, описания в документации
            animation-iteration-count: infinite; // продолжительность анимации
            &:hover {
                animation-play-state: paused;   // анимация будет становиться на паузу при наведении
            }
        }
    
63. Библиотеки анимации.
заходим на https://animate.style/, скачиваем там css файл и подключаем к проекту. 
Дальше в документации есть различные классы анимаций, их можно добавлять к нашему задонному классу элемента.
И после уже настраивать анимацию, прописывая в классу элемента разные св - ва (animation-duration:).
Можно скачать полный animate.css с гита (там есть ссылка) и удалить с него все анимации кроме тех, которые используются (обязательно оставить".animate__animated")
И подключать его
Так же на https://wowjs.uk/ можно скачать архив с файлом wow.min.js.
Подключаем его в конце пере body. Теперь если добавить класс "wow" к классу анимированного элемента, анимация будет происходить при прокрутке до этого элемента.
Работает по умолчанию только с анимациями " https://animate.style/".

new WOW().init();              //Подключение  Wow

wow = new WOW(             // настройка Wow. Кладём плагин в переменную
    {                                  
    boxClass:     'wow',      // 
    animateClass: 'animated', //
    offset:       5000,          //
    mobile:       true,       //
    live:         true        //
  }
  )
  wow.init();           // запускаем переменную

Можно добавлять элементам эти дата-аргументы и так настраивать разные св-ва вов.
data-wow-duration: Change the animation duration
data-wow-delay: Delay before the animation starts
data-wow-offset: Distance to start the animation (related to the browser bottom)
data-wow-iteration: Number of times the animation is repeated

64.Валидация.
Валидность можно проверить на https://validator.w3.org/. Там буду показываться предупреждения и ошибки.
section должен содержать заголовок h


65.
https://pagespeed.web.dev - проверка скорости загрузки и оптимизации сайта.

Все css файлы, котрорые подключаем в начале страницы нужно объединять в один. Для этого перемещаем их в папку sass (создадим для них отдельную папку libs)
У сторонних алвгино обычно есть не только css файл,  но scss и sass Ю которые мы сможен норм подгрузить к нашему основному style.scss через импорт.
 css и scss похожи, по этому часто можно просто поменять расширение файлов и подключаем через import. Подключаем ДО основного кода в том же порядке,
каком они были подключены.

Новые форматы изображений, которые рекомендует гугл, поддерживаются не достаточным кол-вом сайтов на сегодняшний день.

font-display: swap; - свойство позволяет показывать текст до прогрузки шрифтов. Прописывается в файле шрифтов.

Кэширование файлов настраивается на хостинге. Гугл рекомендует кешировать на год. Каким то сторонним плагинам, или iFrame ам настроить кеш мы не можем.

Оптимизировать, сжимать картинки мы можем на https://imagecompressor.com/ru/,
а также с помощью плагина gulp-imagemin.

На https://www.npmjs.com/ можно устанавливать предыдущие версии утилит. Справа сверху строка через @.
npm i gulp-imagemin@7.1.0

66. CSS Grid.

display: grid; /* Задаём грид */
    /* grid-template-columns: 200px 200px 200px; */ /* Говорим сколько колонок мы хотим определить и задаём сразу их размеры (3 колонки по 200рх)*/
    /* grid-template-rows: 60px 60px 60px; */ /* Строки (3 строки по 60рх) */
    /* column-gap: 20px; */ /* Расстояние между элементами сетки (по горизонтали)*/
    /* row-gap: 10px; */ /* Расстояние между строками (по вертикали) */
    grid-template: 60px 150px 60px / 200px 200px 300px; /* Вместе, сначала строки, потом колонки */
    gap: 20px;

/* .grid-container { */
   /*  display: grid; */ /* Задаём грид */
    /* grid-template-columns: 200px 200px 200px; */ /* Говорим сколько колонок мы хотим определить и задаём сразу их размеры (3 колонки по 200рх)*/
    /* grid-template-rows: 60px 60px 60px; */ /* Строки (3 строки по 60рх) */
    /* column-gap: 20px; */ /* Расстояние между элементами сетки (по горизонтали)*/
    /* row-gap: 10px; */ /* Расстояние между строками (по вертикали) */
    /* grid-template: 60px 150px 60px / 200px 200px 300px; */ /* Вместе, сначала строки, потом колонки */
   /*  gap: 20px; */
/* } */

.grid-container {
    /* width: 700px;*/
    /* height: 700px; */ 
    display: grid;
    /* grid-template-columns: 1fr 1fr 1fr; */ /* Каждая колонка будет занимать одинаково треть контейнера */
    /* grid-template-columns: 1fr 2fr 1fr; */ /* Каждая колонка по краям будет занимать одну еденицу, а средняя - две (25% 50% 25%) */
    /* grid-template-rows: 1fr 1fr 1fr; */ /* Тоже самое, только строки */
    /* grid-template-columns: repeat(3, 1fr); */ /* Более оптимизированная запись (3 колонки по 1fr) */
    /* grid-template-columns: repeat(3, 1fr) 20px 40px; */ /* 3 колонки по 1fr, 1 по 20рх и 1 40 рх */
   /*  grid-template-columns: repeat(3, 50px 1fr) 20px; */ /* Конструкция вида - одна колонка 50рх и одна колонка 1fr будет повторяться трижды, а уже в конце будет одна колонка в 20рх */
   /* grid-template-columns: repeat(3, 1fr); */
   /* grid-template-rows: 200px 200px 200px; */
   grid-auto-rows: minmax(100px, auto); /* так указываем, какого размера будут строки, которые не поместятся в grid-container */
   /* grid-auto-columns: 200px; */ /* тоже самое с колонками */
   /* grid-template-columns: minmax(100px, 300px) minmax(100px, 300px) minmax(100px, 300px); */ /* 3 колонки с мин размером в 100рх и макс размером в 300рх */
   /* grid-template-columns: repeat(3, minmax(100px, 300px)); */ /* тоже самое */
   /* grid-template-rows: repeat(3, minmax(100px, 300px)); */ /* по аналогии со строками */
   grid-template-rows: repeat(3, minmax(100px, auto)); /* чаще всего для строк вторым ,максимальным значением указывают "auto" - строка будет подстраиваться под кол-во контента */
   /* auto-fill auto-fill - позволяют в автоматическом режиме расположить все элементы внутри грид-контейнера */
        grid-template-columns: repeat(auto-fit, 320px);  - ширина колонок будет 320рх, а сколько их будет - определиться автоматически.
   grid-template-columns: repeat(3, minmax(150px, 300px));
   /* grid-auto-flow: row; */ /* Можно задавать порядок элементов - в столбик или в строку. Так же это влияет на то, как будут добавляться элементы, которые не влазят в контейнер (неявные гриды) */
   gap: 10px;
   /* grid-template-columns: [col1-s] 150px [col2-s] 150px [col3-s] 150px; */ /* Можно также задавать имена колонкам и строкам */
   /* align-items: stretch; */ /* св-во задаёт " align-self" - сразу для всех элементов */
   /* justify-items: stretch; */ /* св-во задаёт " justify-self" - сразу для всех элементов */
   /* justify-content: center; */ /* Позицмонирование всех колонок сразу по горизонтали, как во флексах */
   /* align-content: center; */ /* по вертикали (у контецнера должна быть задана высота) */
   /* place-content: center space-around; */ /* комбинация 2х свойств в одну строку - сначала по вертикали "align-content" , потом по горизонтали "justify-content" */
    grid-template-areas: 
    "header header header"  /* задаём какие площади, сколько и как будут распологаться (с учётом того, что у нас в контейнере 3 колонки и 3 строки) */
    "blog blog message"
    "footer footer footer";   /* если нужно пустое место, то указываем его как "." */
}

@media (max-width: 768px) {
    .grid-container {
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(4, minmax(100px, auto));
        grid-template-areas: 
        "header header" 
        "blog blog"
        "message message"
        "footer footer"; 
    }
}

.grid-elem {
    /* height: 50px; */
    background-color: rgb(0, 0, 126);
    color: #fff;
    line-height: 50px;
    text-align: center;
    font-size: 26px;
    border: 1px solid #000;
    border-radius: 4px;
}
.orange {
    background-color: orange;
}
#first {
    /* grid-column-start: 1; */ /* обращаемся к 1ой линии колоночной оси. Элемент будет распологаться начиная с первой линии */
    /* grid-column-end: 3; */ /* элемент будет заканчиваться на 3ей линии */
    /* grid-column: 1 / 3;  */ /* тоже самое, сокращённая запись */
    /* grid-column: col1-s/col3-s; */
    /* align-self: stretch; */ /* Свойство для позиционирование элемента внутри грида по колоночной оси*/
    /* justify-self: end; */ /* Свойство для позиционирование элемента внутри грида по строчной оси*/
    /* place-self: stretch center; */ /* комбинация, сначала align-self, потом justify-self */
}
#second {
    /* grid-row-start: 3;  *//* элемент будет начинать расположение от 3ей строчной линии */
    /* grid-row-end: 4; */ /* до 4ой строчной линии */
    /* grid-row: 3/4; */ /* тоже самое, сокращённая запись */
    /* grid-column-start: 2; */ /* и начиная со 2ой колоночной линии */
}
#third {
    /* grid-row-start: 2; */
    /* grid-row-end: 4; */
    /* grid-row: 2/4; */
    /* grid-column-end: 4; */   
}
#header {
    grid-area: header;      /* даёи имена элементам (площадям) внутри грида контейнера */
}
#blog {
    grid-area: blog;
}
#message {
    grid-area: message;
}
#footer {
    grid-area: footer;
    display: grid;       /* делаем из элемента внутри грид контейнера ещё один грид контейнер */
    grid-template-columns: repeat(3, 1fr);
    display: subgrid; /* Свойство задаёт наследование всех св-в от родительского грида */
}
}
}


67.
 min-height: 100vh; - секция с такой установленной вісотой будет на любом мониторе занимать всю высоту экрана.
68.
background: url('../img/bg/bg_girl.jpg') (50%/cover) no-repeat; // задаём объединённо с позиционированием. Фон будет смещаться на 50%.

69.
Когда делаешь какой то элемент, который будет фиксированный на всей странице, лучше его делать не внутри секций, контейнеров, а внутри именно body.


70. Псевдоэлементы не получится задать изображениям. Нужно оборачивать в обёртку и уже ей задавать псевдоэлемент.

AAAAA
71. Если подразумевается, что текст внутри элемента будет разный (например в кнопке), то его лучше выравнивать с помощью педдингов. Сколько будет текста, такой и будет элемент по размеру.

72. object-fit:  св-во для адаптации картинок.
 object-fit: fill - картинка будет полностью замещать контейнер, не стремясь сохранить свои пропорции.
 object-fit: contain - сохраняются пропорции как у оригинала, но при этом никак не растягиваются и не пытаются заполнить пустое место.
 object-fit: cover - универсальное св-во. Картинка будет пытаться заполнить всё пространство контейнера, максимально сохраняя свои пропорции.
73. При адаптации обычно созадют отдельную папку для каждого блока, в котором лежит сам стиль блока и файл медиа к к нему.

74. Ширина контейнеров при адаптации.
@media (max-width: 1200px) {
    .container {
        max-width: 968px;
    }
}
@media (max-width: 992px) {
    .container {
        max-width: 720px;
    }
}
@media (max-width: 768px) {                      //при адаптации будем отмерять в режиме разработчика от 577рх, т.к на 576рх будут действовать 
    .container {                                                         // привила ниже.
    .container {
        max-width: 540px;
    }
}
@media (max-width: 576px) {
    .container {
        max-width: 100%;
        padding: 0 10px;
    }
}

75. Что бы при адаптации нижние блоки и элементы не мешали, их можно закоментировать.
76. max-width: 992px - это планшет, всё лучше адаптировать в 2 колонки.

77. Можно задать, что бы при определённои размере экрана, загружались соответствующие изображения.
Первый способ работает только с одним и тем же изображением, только сжатым или обрезанным (не сработал).
Второй спосоь работает с разными изображениями.
<img srcset="img/main-photo-min.jpg 300w, img/main-photo.jpg 400w"
                            sizes="(max-width: 992px) 280px, (min-width: 993px) 400px"
                            src="img/main-photo.jpg" alt="photo">

           ИЛИ

	<picture>
                        <source media="(max-width: 992px)" srcset="img/main-photo-min.jpg">
                        <source media="(min-width: 993px)" srcset="img/main-photo.jpg">
                        <img src="img/main-photo.jpg" alt="photo">
                    </picture>
78.
	<!-- <picture>
                        <source type="image/webp" srcset="img/main-photo.webp"> 
                        так можно загружать современные форматы изображений,если браузером они не поддерживаются, то загрузится обычная фотка по пути ниже
                        <img src="img/main-photo.jpg" alt="photo">
                    </picture> -->

79. 
	grid-row: unset;          - так свойства в значении по умолчанию. удобно задавать при адаптации.
	grid-column: unset;

80.

:root {           /* Псевдокласс для назначения переменных. Переменные, заданные тут, можно применять ко всей странице. */
    --text-color: rgb(255, 0, 195);  
    --big-text: 30px;     

.element {
    width: 500px;
    margin: 20px;
    color: var(--text-color, red); /* -так, если по каким то причинам переменная не применилась, то присениться значение " red". */

}
.wrapper {
    /* --text-color: blue;  */  /* задаём переменную. */ /* эта переменная будет работать только для".wrapper" или элементов внутри ".wrapper" */
    color: var(--text-color);    /* применяем переменную к элементу. */
    font-size: var(--big-text);
}

@media (max-width: 1200px) {   /* приимущество css переменных, что они работают непосредсвенно в браузере без препроцов */
    :root {                  /*  а значит ими можно пользоваться в адаптации. */
        --text-color: rgba(2, 62, 25, 0.664);  
        --big-text: 50px;     
    }
}

81. input[type='radio'] {            - поменять цвет инпута
    accent-color: #232323;
}

82. &::placeholder {                   - сделать многосрочный плейсхолдер
                display: block;
                white-space: pre-line;
            }

83. input[type=checkbox]:checked + .feed-form__checkbox {                        " .feed-form__checkbox"  <----это лейбл
    border: 2px solid $main-color;
}
 -стилизация своего чекбокса. Был блок внутри лейбла. По выбраному импуту, который скрывался, подсвечивался блок лейбл. инпут делался рядом с лейблом, а не внутри.

84.top: 0;            один из способов выровнять модалку по центру.
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;

85. body.modal-open {              Скрываеться скролл основной страницы при открытой модалке, путём добавления классов.
    overflow: hidden;
    padding-right: 16px;
}

$('body').addClass('modal-open')



86.                                                                                                                                                        Плавный скролл jquery
$('a[href*="#"]').on("click", function(e) {
        e.preventDefault();
        let id  = $(this).attr('href');
        let top = $(id).offset().top; // получаем координаты блока
        $('body, html').animate({scrollTop: top}, 800); // плавно переходим к блоку
    });




87.                                                                                                                                                       Плавный скролл без jquery
const anchors = document.querySelectorAll('a[href*="#"]')
for (let anchor of anchors) {
  anchor.addEventListener('click', function (e) {
    e.preventDefault()
    
    const blockID = anchor.getAttribute('href').substr(1)
    
    document.getElementById(blockID).scrollIntoView({
      behavior: 'smooth',
      block: 'start'
    })
  })
}

Или

const anchors = [].slice.call(document.querySelectorAll('a[href*="#"]')),
      animationTime = 30000,
      framesCount = 20;

anchors.forEach(function(item) {
  // каждому якорю присваиваем обработчик события
  item.addEventListener('click', function(e) {
    // убираем стандартное поведение
    e.preventDefault();
    
    // для каждого якоря берем соответствующий ему элемент и определяем его координату Y
    let coordY = document.querySelector(item.getAttribute('href')).getBoundingClientRect().top + window.pageYOffset;
    
    // запускаем интервал, в котором
    let scroller = setInterval(function() {
      // считаем на сколько скроллить за 1 такт
      let scrollBy = coordY / framesCount;
      
      // если к-во пикселей для скролла за 1 такт больше расстояния до элемента
      // и дно страницы не достигнуто
      if(scrollBy > window.pageYOffset - coordY && window.innerHeight + window.pageYOffset < document.body.offsetHeight) {
        // то скроллим на к-во пикселей, которое соответствует одному такту
        window.scrollBy(0, scrollBy);
      } else {
        // иначе добираемся до элемента и выходим из интервала
        window.scrollTo(0, coordY);
        clearInterval(scroller);
      }
    // время интервала равняется частному от времени анимации и к-ва кадров
    }, animationTime / framesCount);
  });
});

88. установите NodeJS
установите глобально:
Yarn: npm i -g yarn
Gulp: npm i -g gulp
Bem Tools: npm i -g bem-tools-core
скачайте сборку с помощью Git: git clone https://github.com/andreyalexeich/gulp-scss-starter.git
перейдите в скачанную папку со сборкой: cd gulp-scss-starter
введите yarn set version berry
скачайте необходимые зависимости: yarn
чтобы начать работу, введите команду: yarn run dev (режим разработки)
чтобы собрать проект, введите команду yarn run build (режим сборки)

89. Команды для галп-сборки.
yarn run bem-m          - создать блок.
import $ from "jquery";     - импорт библиотеки в начале js файла блока.
yarn run lint:styles
yarn run dev - запуск сервера для разработки проекта
yarn run build - собрать проект с оптимизацией без запуска сервера
yarn run build:views - собрать HTML-файлы
yarn run build:styles - скомпилировать SCSS-файлы
yarn run build:scripts - собрать JS-файлы
yarn run build:images - собрать изображения
yarn run build:webp - сконвертировать изображения в формат .webp
yarn run build:sprites- собрать спрайты
yarn run build:fonts - собрать шрифты
yarn run build:favicons - собрать фавиконки
yarn run build:gzip - собрать конфигурацию Apache
yarn run bem-m - добавить БЭМ-блок
yarn run lint:styles --fix - исправить ошибки в SCSS-файлах согласно настройкам Stylelint
yarn run lint:scripts - проверить JS-файлы
yarn run lint:scripts --fix - исправить ошибки в JS-файлах согласно настройкам ESLint

90.
.modal {                                                     кодгайд
    display: none;
    position: absolute;
    z-index: 20;
    top: 50%;
    left: 50%;
    width: 610px;
    height: 100vh;
    overflow: auto;
    padding: 75px 55px;
    transform: translate(-50%, -50%);
    background-color: #fff;
    -ms-overflow-style: none;
    scrollbar-width: none;

    &::-webkit-scrollbar {
        width: 0;
    }

    &_active {
        display: block;
    }

91. примеры

let text = $('#sign-telegram:checked + .feed-form__radio-label').text();

let text = $('.feed-form__radio:checked + .feed-form__radio-label').text();

'#sign-form input.feed-form__radio:checked + .feed-form__radio-label' -   Внутри формы с id чекнутый  инпут с таким то классом + его лейбл


92,                                                                                                                                               

$.validator.addMethod("justtime", function(value, element) {                     задать сой метод в плагине валидатор
        return /[a-z]+@[a-z]+\.[a-z]+/.test(value);
        return this.optional( element ) || /^[0-9]/.test( value );
        /* /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@(?:\S{1,63})$/ */
      },
      "Неверный формат")


93. $('#sign-time').on('input', function(){                                          пример валидация без плагина (в этом примере можно вводить только цифры и некоторые символы)
        this.value = this.value.replace(/[^0-9\.\,\:\ ]/g, '');
    });

                           
94. form.submit(function(e){                                       Проверка на валидность формы при отправке,
        e.preventDefault();
        if (form.valid()) {
            alert('Форма отправлена');
        }
        return;
    });


$("#datepicker").datepicker({
        onSelect: function(date) {                   
            $('#sign-date').val(date) 
        }                                                                                                                                         //всегда видимый календарь
    });
    $("#datepicker").datepicker("setDate", $('#sign-date').val());
    
    

    $("#datepicker").datepicker("option", "dateFormat", "dd-mm-yy");       // формат даты       
    $( "#datepicker" ).datepicker( "refresh" );

      $.datepicker.regional['ru'] = {         // локализация
        closeText: 'Закрыть',
        prevText: 'Предыдущий',
        nextText: 'Следующий',
        currentText: 'Сегодня',
        monthNames: ['Январь','Февраль','Март','Апрель','Май','Июнь','Июль','Август','Сентябрь','Октябрь','Ноябрь','Декабрь'],
        monthNamesShort: ['Янв','Фев','Мар','Апр','Май','Июн','Июл','Авг','Сен','Окт','Ноя','Дек'],
        dayNames: ['воскресенье','понедельник','вторник','среда','четверг','пятница','суббота'],
        dayNamesShort: ['вск','пнд','втр','срд','чтв','птн','сбт'],
        dayNamesMin: ['Вс','Пн','Вт','Ср','Чт','Пт','Сб'],
        weekHeader: 'Не',
        dateFormat: 'dd.mm.yy',
        firstDay: 1,
        isRTL: false,
        showMonthAfterYear: false,
        yearSuffix: ''
    };
    $.datepicker.setDefaults($.datepicker.regional['ru']);    //

95.

&__slider {
        position: relative;                                            свойства для слайдера, что бы картинки были одной высоты
        width: 966px;
        margin: 42px 0 0 26px;  
    }

    &__img {
        width: auto;
        height: 689px;
        object-fit: cover;
    }



96. Что бы позиционировать только один элемент внутри флекс контейнера, можно погираться с  margin: auto;

97.

&__nav {                                                                                    -  боковая фированная менюшка со скролом
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            justify-content: space-between;          
            width: 100%;
            min-height: 932px;                                                - обязательно мин высота для всего контента
            padding: 32px 20px 194px 20px;  
            background-color: $main-color2;  
            z-index: 10;

            &-wrapper {                                                                 - фиксирование и прокрутку задаём именно обёртке
                position: fixed;
                width: 100%;
                max-height: 100vh;                                              -  макс высота(на весь экран) , после которой будет скролл
                overflow: scroll; 
                top: 0;
                left: -100%; 
                z-index: 10;
                transition: 0.6s all;

                &_active {
                    left: 0;
                }
            }
        }

98. Отпраыка данных в ТГ.
	1) Создаём бота в BotFather (тоже бот с галочкой) (первое название бота простое? оно будет высвечиваться сверху, второе дожно заканчиваться на bot)
	2)После создание копируем себе токен бота
	3)После создания, сверху над токеном - ссылка на бота. Переходим по ней и запускаем бота
	4)Создаём группу.
	5)Добавляем бота в группу из самого бота (просто из группы по поиску не находит
	6) Пишем в чате группы /join @ник_бота
	7) Переходим на              https://api.telegram.org/botXXXXXXXXXXXXXXXXXXXXXXX/getUpdates  , вбиваем вместо X токен бота
	8) находим на странице chat id  ("id": -4138443533    - пример.  id  всегда попадался с минусом в начале )

99. Подключение к хостингу.
Сервер - s4.serv00.com    Логин - f5531_club_siegerus    Пароль ******

100. 
Толщины шрифтов в CSS

Название	font-weight
Thin / Hair	100
Extra Light	200
Light	300
Regular	400
Medium	500
Semi Bold	600
Bold	700
Extra Bold	800
Black / Heavy / Ultra	900


Часть кода работает. Но если не указывать "e.target" каждого вложенного элемента, то событие срабатывает только при клике по родителю "menu", но не по этим элементам. Как сделать иначе, что бы не перебирать по очереди все дочерние элементы?
Просто проверяй родителя.
Как закрыть меню при клике в любом месте страницы, кроме самого выпадающего списка "dropdown" и вложенным в него "li"?
Такое можно сделать как в моем примере...
Так же как совет - не стоит вешать столько много классов типа active. Достаточно одного - на родителе. Остальные свойства можно определить относительно "активного" родителя. ;)

Сайт размещён на хостинге под учетной записью на почте kb.14@mail.ru


!!! Необходимо пройти идентификацию по инструкции:


https://help.reg.ru/support/lichnyy-kabinet/registratsiya-i-kontaktnyye-dannyye/kak-proyti-identifikatsiyu-vladeltsam-hostinga



Панель управления сайтом:

https://toapinfo.ru/mg-admin/

логин: kb.14@mail.ru

пароль: 12345


Для доступа к системе аналитики, отправьте почтовый адрес yandex и gmail


Видео-инструкций по ссылке:

https://drive.google.com/file/d/10BTDVXojRjQsP54hYfsGTH9LfyLgM5Oh/view?usp=sharing

 
Ваш лицензионный ключ:  78e3f730990157c35b6a7be4ec85c3bf

101.  * { 
outline : 4px solid green !Important; для обнаружения выпирающих блоков при адаптиве.
}


